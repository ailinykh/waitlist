// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: waitlist.sql

package repository

import (
	"context"
	"database/sql"
)

const createEntry = `-- name: CreateEntry :execresult
INSERT INTO waitlist (user_id, first_name, last_name, username, bot_username, message, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, now(), now())
`

type CreateEntryParams struct {
	UserID      int64  `json:"user_id"`
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	Username    string `json:"username"`
	BotUsername string `json:"bot_username"`
	Message     string `json:"message"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEntry,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.BotUsername,
		arg.Message,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (user_id, first_name, last_name, username, photo_url, role, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, "user", now(), now())
`

type CreateUserParams struct {
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Username  string `json:"username"`
	PhotoUrl  string `json:"photo_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.PhotoUrl,
	)
}

const getAllEntries = `-- name: GetAllEntries :many
SELECT id, user_id, first_name, last_name, username, bot_username, message, created_at, updated_at FROM waitlist
`

func (q *Queries) GetAllEntries(ctx context.Context) ([]Waitlist, error) {
	rows, err := q.db.QueryContext(ctx, getAllEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Waitlist
	for rows.Next() {
		var i Waitlist
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.BotUsername,
			&i.Message,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, user_id, first_name, last_name, username, photo_url, role, created_at, updated_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.PhotoUrl,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntryByID = `-- name: GetEntryByID :one
SELECT id, user_id, first_name, last_name, username, bot_username, message, created_at, updated_at FROM waitlist WHERE id = ?
`

func (q *Queries) GetEntryByID(ctx context.Context, id uint64) (Waitlist, error) {
	row := q.db.QueryRowContext(ctx, getEntryByID, id)
	var i Waitlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.BotUsername,
		&i.Message,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUserID = `-- name: GetUserByUserID :one
SELECT id, user_id, first_name, last_name, username, photo_url, role, created_at, updated_at FROM users WHERE user_id = ?
`

func (q *Queries) GetUserByUserID(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserID, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.PhotoUrl,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
